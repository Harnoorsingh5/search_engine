https://www.guru99.com//java-oops-encapsulation.html
Encapsulation in Java OOPs with Example Home Testing Back Agile Testing BugZilla Cucumber Database Testing ETL Testing Jmeter JIRA Back JUnit LoadRunner Manual Testing Mobile Testing Mantis Postman QTP Back Quality Center (ALM) RPA SAP Testing Selenium SoapUI Test Management TestLink SAP Back ABAP APO Beginner Basis BODS BI BPC CO Back CRM Crystal Reports FICO HANA HR MM QM Payroll Back PI/PO PP SD SAPUI5 Security Solution Manager Successfactors SAP Tutorials Web Back Apache Android AngularJS ASP.Net C C# C++ CodeIgniter DBMS Back Java JavaScript JSP Kotlin Linux MariaDB MS Access MYSQL Node.js Back Perl PHP PL/SQL PostgreSQL Python ReactJS Ruby & Rails Scala SQL Back SQL Server SQLite UML VB.Net VBScript Web Services WPF Must Learn! Back Accounting Algorithms Blockchain Business Analyst Build Website CCNA Cloud Computing COBOL Compiler Design Embedded Systems Back Ethical Hacking Excel Tutorials Go Programming IoT ITIL Jenkins MIS Networking Operating System Prep Back PMP Photoshop Project Management Reviews Salesforce SEO Software Engineering VBA Big Data Back AWS BigData Cassandra Cognos Data Warehousing DevOps HBase Back Hive Informatica MicroStrategy MongoDB NiFi OBIEE Pentaho Back Power BI Qlikview Tableau Talend ZooKeeper Live Projects Back Live Agile Testing Live HP ALM Live Java Project Live Mobile Testing Live Payment Gateway Live PHP Project Live Projects Hub Live Python Project Back Live Selenium Project Live Selenium 2 Live Security Testing Live Testing Project Live Testing 2 Live Telecom Live UFT/QTP Testing AI Back Artificial Intelligence Data Science Keras NLTK Back NumPy PyTorch R Programming TensorFlow Blog Encapsulation in Java OOPs with Example Details Last Updated: 25 March 2020 What is Encapsulation in Java? Encapsulation is a principle of wrapping data (variables) and code together as a single unit. It is one of the four OOP concepts. The other three are Inheritance, Polymorphism, and Abstraction. In this tutorial, you will learn- What is Encapsulation in Java? Learn Encapsulation with an Example Data Hiding in Java Getter and Setter Methods in Java Abstraction vs. Encapsulation Advantages of Encapsulation in Java Click here if the video is not accessible Learn Encapsulation with an Example To understand what is encapsulation in detail consider the following bank account class with deposit and show balance methods 
class Account {
    private int account_number;
    private int account_balance;

    public void show Data() {
        //code to show data 
    }

    public void deposit(int a) {
        if (a < 0) {
            //show error 
        } else
            account_balance = account_balance + a;
    }
}
 Suppose a hacker managed to gain access to the code of your bank account. Now, he tries to deposit amount -100 into your account by two ways. Let see his first method or approach. Approach 1: He tries to deposit an invalid amount (say -100) into your bank account by manipulating the code. Now, the question is – Is that possible? Let investigate. Usually, a variable in a class are set as "private" as shown below. It can only be accessed with the methods defined in the class. No other class or object can access them. If a data member is private, it means it can only be accessed within the same class. No outside class can access private data member or variable of other class. So in our case hacker cannot deposit amount -100 to your account. Approach 2: Hacker's first approach failed to deposit the amount. Next, he tries to do deposit a amount -100 by using "deposit" method. But method implementation has a check for negative values. So the second approach also fails. Thus, you never expose your data to an external party. Which makes your application secure. The entire code can be thought of a capsule, and you can only communicate through the messages. Hence the name encapsulation. Data Hiding in Java Frequently, Java encapsulation is referred as data hiding. But more than data hiding, encapsulation concept is meant for better management or grouping of related data. To achieve a lesser degree of encapsulation in Java, you can use modifiers like "protected" or "public". With encapsulation, developers can change one part of the code easily without affecting other. Getter and Setter Methods in Java If a data member is declared "private", then it can only be accessed within the same class. No outside class can access data member of that class. If you need to access these variables, you have to use public "getter" and "setter" methods. Getter and Setter's methods are used to create, modify, delete and view the variables values. The following code is an example of getter and setter methods: 
class Account{ 
private int account_number;
private int account_balance; 
    // getter method
	public int getBalance() {
        return this.account_balance;
    }
    // setter method
	public void setNumber(int num) {
        this.account_number = num;
    }
}
 In above example, getBalance() method is getter method that reads value of variable account_balance and setNumber() method is setter method that sets or update value for variable account_number. Abstraction vs. Encapsulation Often encapsulation is misunderstood with Abstraction. Lets study- Encapsulation is more about "How" to achieve a functionality Abstraction is more about "What" a class can do. A simple example to understand this difference is a mobile phone. Where the complex logic in the circuit board is encapsulated in a touch screen, and the interface is provided to abstract it out. Advantages of Encapsulation in Java Encapsulation is binding the data with its related functionalities. Here functionalities mean "methods" and data means "variables" So we keep variable and methods in one place. That place is "class." Class is the base for encapsulation. With Java Encapsulation, you can hide (restrict access) to critical data members in your code, which improves security As we discussed earlier, if a data member is declared "private", then it can only be accessed within the same class. No outside class can access data member (variable) of other class. However, if you need to access these variables, you have to use public "getter" and "setter" methods.   Prev Report a Bug Next YOU MIGHT LIKE: JavaScript Top 85 JavaScript Interview Questions & Answers 1. What is JavaScript? JavaScript is a client-side as well as server side scripting language that... Read more Java Tutorials String compareTo() Method in Java with Example What is compareTo() method in Java? compareTo() is used for comparing two strings... Read more Java Tutorials JDK vs JRE vs JVM: Key Differences What is JDK? JDK is a software development environment used for making applets and Java... Read more Java Tutorials Java vs Python: What's the Difference? What is Java? Java is a multi-platform, object-oriented, and network-centric, programming... Read more Java Tutorials Top 22 Java Design Patterns Interview Questions & Answers 1) Explain what is Java Design Pattern? A design pattern is a language independent strategy for... Read more JavaScript JavaScript Unit Testing Frameworks What is JavaScript? JavaScript is a programming language which is defined as high level, dynamic and... Read more 1) Java Platform 2) Java Virtual Machine 3) How to install java 4) Download & Install Java in Linux 5) First Java Program 6) Concept of OOPs 7) Data Abstraction 8) Encapsulation 9) Java Variables 10) Class & Objects 11) Java Arrays 12) Array of Objects 13) ArrayList in Java 14) Java Strings 15) String Length() Method 16) String indexOf() Method 17) String charAt() Method 18) String compareTo() Method 19) String contains() Method 20) String endsWith() Method 21) Java String replace() 22) toLowercase() & toUpperCase() 23) Convert a Java String to Integer 24) HashMaps in Java 25) Command-line 26) This Keyword 27) Garbage Collection 28) Static Variables 29) Stack Heap 30) Inheritance 31) Polymorphism 32) Abstract Method & Class 33) Java Interface 34) Interface vs Abstract Class 35) Java Constructors 36) Java Packages 37) Exception Handling 38) User-defined 39) Throws 40) Trick with For Loop 41) Switch in Java 42) Maths with Java 43) Generate Random Number 44) Date in Java 45) Multithreading in Java 46) Java GUI – Swing 47) Split a String 48) Buffered Reader 49) Java Reflection API Tutorials 50) Check Prime Number 51) Convert JSON to XML using Gson and JAXB 52) Prime Number From 1 to 100 53) Convert Char to String 54) Fibonacci Series 55) Check Armstrong Number 56) Reverse String using Recursion 57) Check Palindrome Number 58) Bubble Sort Program 59) Insertion Sort Algorithm 60) Selection Sorting 61) Java Tools for Developers 62) Groovy Script Tutorial 63) Java Spring Tutorial 64) Apache ANT Tutorial 65) JasperReports Tutorial 66) C++ Vs JAVA 67) JDK Vs JRE Vs JVM 68) Java Vs C# 69) Java Vs Python 70) Java Vs Scala 71) Java Interview Q & A 72) Java Design Patterns Interview Q & A 73) JMS Interview Q & A 74) Groovy Interview Q & A 75) JAVA Programming PDF Java Tutorials Top Tutorials About About Us Advertise with Us Write For Us Contact Us Career Suggestion SAP Career Suggestion Tool Software Testing as a Career Selenium Testing Hacking Interesting eBook Blog Quiz SAP eBook SAP Java Python Execute online Execute Java Online Execute Javascript Execute HTML Execute Python Jmeter Informatica JIRA © Copyright - Guru99 2020         Privacy Policy  |  Affiliate Disclaimer  |  ToS
