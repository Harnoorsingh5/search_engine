https://www.guru99.com//java-virtual-machine-jvm.html
Java Virtual Machine (JVM) & its Architecture Home Testing Back Agile Testing BugZilla Cucumber Database Testing ETL Testing Jmeter JIRA Back JUnit LoadRunner Manual Testing Mobile Testing Mantis Postman QTP Back Quality Center (ALM) RPA SAP Testing Selenium SoapUI Test Management TestLink SAP Back ABAP APO Beginner Basis BODS BI BPC CO Back CRM Crystal Reports FICO HANA HR MM QM Payroll Back PI/PO PP SD SAPUI5 Security Solution Manager Successfactors SAP Tutorials Web Back Apache Android AngularJS ASP.Net C C# C++ CodeIgniter DBMS Back Java JavaScript JSP Kotlin Linux MariaDB MS Access MYSQL Node.js Back Perl PHP PL/SQL PostgreSQL Python ReactJS Ruby & Rails Scala SQL Back SQL Server SQLite UML VB.Net VBScript Web Services WPF Must Learn! Back Accounting Algorithms Blockchain Business Analyst Build Website CCNA Cloud Computing COBOL Compiler Design Embedded Systems Back Ethical Hacking Excel Tutorials Go Programming IoT ITIL Jenkins MIS Networking Operating System Prep Back PMP Photoshop Project Management Reviews Salesforce SEO Software Engineering VBA Big Data Back AWS BigData Cassandra Cognos Data Warehousing DevOps HBase Back Hive Informatica MicroStrategy MongoDB NiFi OBIEE Pentaho Back Power BI Qlikview Tableau Talend ZooKeeper Live Projects Back Live Agile Testing Live HP ALM Live Java Project Live Mobile Testing Live Payment Gateway Live PHP Project Live Projects Hub Live Python Project Back Live Selenium Project Live Selenium 2 Live Security Testing Live Testing Project Live Testing 2 Live Telecom Live UFT/QTP Testing AI Back Artificial Intelligence Data Science Keras NLTK Back NumPy PyTorch R Programming TensorFlow Blog Java Virtual Machine (JVM) & its Architecture Details Last Updated: 25 March 2020 What is JVM? Java Virtual Machine (JVM) is a engine that provides runtime environment to drive the Java Code or applications. It converts Java bytecode into machines language. JVM is a part of Java Run Environment (JRE). In other programming languages, the compiler produces machine code for a particular system. However, Java compiler produces code for a Virtual Machine known as Java Virtual Machine. Here is how JVM works First, Java code is complied into bytecode. This bytecode gets interpreted on different machines Between host system and Java source, Bytecode is an intermediary language. JVM is responsible for allocating memory space. In this tutorial, you will learn- JVM Architecture Software Code Compilation & Execution process C code Compilation and Execution process Java code Compilation and Execution process Why is Java both interpreted and Compiled Language? Why is Java slow? JVM ArchitectureLet's understand the Architecture of JVM. It contains classloader, memory area, execution engine etc. 1) ClassLoader The class loader is a subsystem used for loading class files. It performs three major functions viz. Loading, Linking, and Initialization. 2) Method Area JVM Method Area stores class structures like metadata, the constant runtime pool, and the code for methods. 3) Heap All the Objects, their related instance variables, and arrays are stored in the heap. This memory is common and shared across multiple threads. 4) JVM language Stacks Java language Stacks store local variables, and it’s partial results. Each thread has its own JVM stack, created simultaneously as the thread is created. A new frame is created whenever a method is invoked, and it is deleted when method invocation process is complete. 5)  PC Registers PC register store the address of the Java virtual machine instruction which is currently executing. In Java, each thread has its separate PC register. 6) Native Method Stacks Native method stacks hold the instruction of native code depends on the native library. It is written in another language instead of Java. 7) Execution Engine It is a type of software used to test hardware, software, or complete systems. The test execution engine never carries any information about the tested product. 8) Native Method interface The Native Method Interface is a programming framework. It allows Java code which is running in a JVM to call by libraries and native applications. 9) Native Method Libraries Native Libraries is a collection of the Native Libraries(C, C++) which are needed by the Execution Engine. Software Code Compilation & Execution process In order to write and execute a software program, you need the following 1) Editor – To type your program into, a notepad could be used for this 2) Compiler – To convert your high language program into native machine code 3) Linker – To combine different program files reference in your main program together. 4) Loader – To load the files from your secondary storage device like Hard Disk, Flash Drive, CD into RAM for execution. The loading is automatically done when you execute your code. 5) Execution – Actual execution of the code which is handled by your OS & processor. With this background, refer the following video & learn the working and architecture of the Java Virtual Machine. Click here if the video is not accessible C code Compilation and Execution process To understand the Java compiling process in Java. Let's first take a quick look to compiling and linking process in C. Suppose in the main, you have called two function f1 and f2. The main function is stored in file a1.c. Function f1 is stored in a file a2.c Function f2 is stored in a file a3.c All these files, i.e., a1.c, a2.c, and a3.c, is fed to the compiler. Whose output is the corresponding object files which are the machine code. The next step is integrating all these object files into a single .exe file with the help of linker. The linker will club all these files together and produces the .exe file. During program run, a loader program will load a.exe into the RAM for the execution. Java code Compilation and Execution in Java VM Let's look at the process for JAVA. In your main, you have two methods f1 and f2. The main method is stored in file a1.java f1 is stored in a file as a2.java f2 is stored in a file as a3.java The compiler will compile the three files and produces 3 corresponding .class file which consists of BYTE code. Unlike C, no linking is done. The Java VM or Java Virtual Machine resides on the RAM. During execution, using the class loader the class files are brought on the RAM. The BYTE code is verified for any security breaches. Next, the execution engine will convert the Bytecode into Native machine code. This is just in time compiling. It is one of the main reason why Java is comparatively slow. NOTE: JIT or Just-in-time compiler is the part of the Java Virtual Machine (JVM). It interprets part of the Byte Code that has similar functionality at the same time. Why is Java both Interpreted and Compiled Language?Programming languages are classified as Higher Level Language Ex. C++, Java Middle-Level Languages Ex. C Low-Level Language Ex Assembly finally the lowest level as the Machine Language. A compiler is a program which converts a program from one level of language to another. Example conversion of C++ program into machine code. The java compiler converts high-level java code into bytecode (which is also a type of machine code). An interpreter is a program which converts a program at one level to another programming language at the same level. Example conversion of Java program into C++ In Java, the Just In Time Code generator converts the bytecode into the native machine code which are at the same programming levels. Hence, Java is both compiled as well as interpreted language. Why is Java slow? The two main reasons behind the slowness of Java are Dynamic Linking: Unlike C, linking is done at run-time, every time the program is run in Java. Run-time Interpreter: The conversion of byte code into native machine code is done at run-time in Java which furthers slows down the speed However, the latest version of Java has addressed the performance bottlenecks to a great extent. Summary: Full form of JVM is Java Virtual Machine. JVM is the engine that drives the Java Code. It converts Java bytecode into machines language. In JVM, Java code is compiled to bytecode. This bytecode gets interpreted on different machines JIT stands for Just-in-time compiler. JIT is the part of the Java Virtual Machine (JVM). It is used to speed up the execution time In comparison to other compiler machines, Java may be slow in execution.   Prev Report a Bug Next YOU MIGHT LIKE: Java Tutorials How to Reverse a String in Java using Recursion In this example program, we will reverse a string entered by a user. We will create a function to... Read more Java Tutorials JDK vs JRE vs JVM: Key Differences What is JDK? JDK is a software development environment used for making applets and Java... Read more Java Tutorials How to Convert Char to String in Java (Examples) In this tutorial, we will study programs to To convert a character to String To convert a String to... Read more Java Tutorials Fibonacci Series Program in Java using Loops & Recursion What is Fibonacci Series? In Fibonacci series, next number is the sum of previous two numbers. The... Read more Java Tutorials Prime Number From 1 to 100 Program in Java What is a Prime Number? A prime number is a number that is only divisible by 1 or itself. For... Read more Java Tutorials 20 Best Java Tools for Developers in 2020 There are many tools available for Java management. These software ease the entire process of... Read more 1) Java Platform 2) Java Virtual Machine 3) How to install java 4) Download & Install Java in Linux 5) First Java Program 6) Concept of OOPs 7) Data Abstraction 8) Encapsulation 9) Java Variables 10) Class & Objects 11) Java Arrays 12) Array of Objects 13) ArrayList in Java 14) Java Strings 15) String Length() Method 16) String indexOf() Method 17) String charAt() Method 18) String compareTo() Method 19) String contains() Method 20) String endsWith() Method 21) Java String replace() 22) toLowercase() & toUpperCase() 23) Convert a Java String to Integer 24) HashMaps in Java 25) Command-line 26) This Keyword 27) Garbage Collection 28) Static Variables 29) Stack Heap 30) Inheritance 31) Polymorphism 32) Abstract Method & Class 33) Java Interface 34) Interface vs Abstract Class 35) Java Constructors 36) Java Packages 37) Exception Handling 38) User-defined 39) Throws 40) Trick with For Loop 41) Switch in Java 42) Maths with Java 43) Generate Random Number 44) Date in Java 45) Multithreading in Java 46) Java GUI – Swing 47) Split a String 48) Buffered Reader 49) Java Reflection API Tutorials 50) Check Prime Number 51) Convert JSON to XML using Gson and JAXB 52) Prime Number From 1 to 100 53) Convert Char to String 54) Fibonacci Series 55) Check Armstrong Number 56) Reverse String using Recursion 57) Check Palindrome Number 58) Bubble Sort Program 59) Insertion Sort Algorithm 60) Selection Sorting 61) Java Tools for Developers 62) Groovy Script Tutorial 63) Java Spring Tutorial 64) Apache ANT Tutorial 65) JasperReports Tutorial 66) C++ Vs JAVA 67) JDK Vs JRE Vs JVM 68) Java Vs C# 69) Java Vs Python 70) Java Vs Scala 71) Java Interview Q & A 72) Java Design Patterns Interview Q & A 73) JMS Interview Q & A 74) Groovy Interview Q & A 75) JAVA Programming PDF Java Tutorials Top Tutorials About About Us Advertise with Us Write For Us Contact Us Career Suggestion SAP Career Suggestion Tool Software Testing as a Career Selenium Testing Hacking Interesting eBook Blog Quiz SAP eBook SAP Java Python Execute online Execute Java Online Execute Javascript Execute HTML Execute Python Jmeter Informatica JIRA © Copyright - Guru99 2020         Privacy Policy  |  Affiliate Disclaimer  |  ToS
