https://www.guru99.com//java-class-inheritance.html
Inheritance in Java OOPs with Example Home Testing Back Agile Testing BugZilla Cucumber Database Testing ETL Testing Jmeter JIRA Back JUnit LoadRunner Manual Testing Mobile Testing Mantis Postman QTP Back Quality Center (ALM) RPA SAP Testing Selenium SoapUI Test Management TestLink SAP Back ABAP APO Beginner Basis BODS BI BPC CO Back CRM Crystal Reports FICO HANA HR MM QM Payroll Back PI/PO PP SD SAPUI5 Security Solution Manager Successfactors SAP Tutorials Web Back Apache Android AngularJS ASP.Net C C# C++ CodeIgniter DBMS Back Java JavaScript JSP Kotlin Linux MariaDB MS Access MYSQL Node.js Back Perl PHP PL/SQL PostgreSQL Python ReactJS Ruby & Rails Scala SQL Back SQL Server SQLite UML VB.Net VBScript Web Services WPF Must Learn! Back Accounting Algorithms Blockchain Business Analyst Build Website CCNA Cloud Computing COBOL Compiler Design Embedded Systems Back Ethical Hacking Excel Tutorials Go Programming IoT ITIL Jenkins MIS Networking Operating System Prep Back PMP Photoshop Project Management Reviews Salesforce SEO Software Engineering VBA Big Data Back AWS BigData Cassandra Cognos Data Warehousing DevOps HBase Back Hive Informatica MicroStrategy MongoDB NiFi OBIEE Pentaho Back Power BI Qlikview Tableau Talend ZooKeeper Live Projects Back Live Agile Testing Live HP ALM Live Java Project Live Mobile Testing Live Payment Gateway Live PHP Project Live Projects Hub Live Python Project Back Live Selenium Project Live Selenium 2 Live Security Testing Live Testing Project Live Testing 2 Live Telecom Live UFT/QTP Testing AI Back Artificial Intelligence Data Science Keras NLTK Back NumPy PyTorch R Programming TensorFlow Blog Inheritance in Java OOPs with Example Details Last Updated: 25 March 2020 What is Inheritance? Inheritance is a mechanism in which one class acquires the property of another class. For example, a child inherits the traits of his/her parents. With inheritance, we can reuse the fields and methods of the existing class. Hence, inheritance facilitates Reusability and is an important concept of OOPs. In this tutorial, you will learn- Types of Inheritance Inheritance in Java Java Inheritance Example Super Keyword Learn Inheritance in OOP’s with Example Types of Inheritance There are Various types of inheritance in Java: Single Inheritance: In Single Inheritance one class extends another class (one class only). Single Inheritance In above diagram, Class B extends only Class A. Class A is a super class and Class B is a Sub-class. Multiple Inheritance: In Multiple Inheritance, one class extending more than one class. Java does not support multiple inheritance. Multiple Inheritance As per above diagram, Class C extends Class A and Class B both. Multilevel Inheritance: In Multilevel Inheritance, one class can inherit from a derived class. Hence, the derived class becomes the base class for the new class. Multilevel Inheritance As per shown in diagram Class C is subclass of B and B is a of subclass Class A. Hierarchical Inheritance: In Hierarchical Inheritance, one class is inherited by many sub classes. Hierarchical Inheritance As per above example, Class B, C, and D inherit the same class A. Hybrid Inheritance: Hybrid inheritance is a combination of Single and Multiple inheritance. Hybrid Inheritance As per above example, all the public and protected members of Class A are inherited into Class D, first via Class B and secondly via Class C. Note: Java doesn't support hybrid/Multiple inheritence Inheritance In Java JAVA INHERITANCE is a mechanism in which one class acquires the property of another class. In Java, when an "Is-A" relationship exists between two classes, we use Inheritance. The parent class is called a super class and the inherited class is called a subclass. The keyword extends is used by the sub class to inherit the features of super class. Inheritance is important since it leads to the reusability of code. Java Inheritance Syntax: 
class subClass extends superClass  
{  
   //methods and fields  
}  
 Java Inheritance Example 
class Doctor {
 void Doctor_Details() {
  System.out.println("Doctor Details...");
 }
}

class Surgeon extends Doctor {
 void Surgeon_Details() {
  System.out.println("Surgen Detail...");
 }
}

public class Hospital {
 public static void main(String args[]) {
  Surgeon s = new Surgeon();
  s.Doctor_Details();
  s.Surgeon_Details();
 }
}
 Super Keyword The super keyword is similar to "this" keyword. The keyword super can be used to access any data member or methods of the parent class. Super keyword can be used at variable, method and constructor level. Syntax: 
super.<method-name>();
 Learn Inheritance in OOP’s with Example Consider the same banking application from the previous example. We are supposed to open two different account types, one for saving and another for checking (also known as current). Let's compare and study how we can approach coding from a structured and object-oriented programming perspective. Structural approach: In structured programming, we will create two functions – One to withdraw And the other for deposit action. Since the working of these functions remains same across the accounts. OOP's approach: While using the OOPs programming approach. We would create two classes. Each having implementation of the deposit and withdraw functions. This will redundant extra work. Change Request in Software Now there is a change in the requirement specification for something that is so common in the software industry. You are supposed to add functionality privileged Banking Account with Overdraft Facility. For a background, overdraft is a facility where you can withdraw an amount more than available the balance in your account. Structural approach: Using functional approach, I have to modify my withdraw function, which is already tested and baselined. And add a method like below will take care of new requirements. OOP's approach: Using OOP's approach, you just need to write a new class with unique implementation of withdraw function. We never touched the tested piece of code. Another Change Request What if the requirement changes further? Like to add credit card account with its own unique requirement of deposits. Structural approach: Using structural approach you have to change tested piece of deposit code again. OOP's approach: But using object-oriented approach, you will just create a new class with its unique implementation of deposit method ( highlighted red in the image below). So even though the structural programming seems like an easy approach initially, OOP's wins in a long term. Advantage of Inheritance in OOPs But one may argue that across all classes, you have a repeated pieces of code. To overcome this, you create a parent class, say "account" and implement the same function of deposit and withdraw. And make child classes inherited "account" class. So that they will have access to withdraw and deposit functions in account class. The functions are not required to be implemented individually. This is Inheritance in java. .   Prev Report a Bug Next YOU MIGHT LIKE: Java Tutorials JasperReports Tutorial: Install Studio, Template Example What is Jasper Reports? JasperReports is an open-source Java reporting engine. This Java class... Read more Java Tutorials Top 25 JMS (Java Message Service) Interview Questions & Answers 1) What is JMS? JMS means Java Messaging Service. It is the new standard for inter client... Read more Java Tutorials 20 Best Java Tools for Developers in 2020 There are many tools available for Java management. These software ease the entire process of... Read more JavaScript Top 85 JavaScript Interview Questions & Answers 1. What is JavaScript? JavaScript is a client-side as well as server side scripting language that... Read more Java Tutorials JAVA Programming Tutorial for Beginners PDF Java is the most popular programming language & is the language of choice for Android programming. Key... Read more Java Tutorials Java String replace(), replaceFirst() & replaceAll() Method EXAMPLE Java String has three types of Replace method replace replaceAll replaceFirst. With the help of... Read more 1) Java Platform 2) Java Virtual Machine 3) How to install java 4) Download & Install Java in Linux 5) First Java Program 6) Concept of OOPs 7) Data Abstraction 8) Encapsulation 9) Java Variables 10) Class & Objects 11) Java Arrays 12) Array of Objects 13) ArrayList in Java 14) Java Strings 15) String Length() Method 16) String indexOf() Method 17) String charAt() Method 18) String compareTo() Method 19) String contains() Method 20) String endsWith() Method 21) Java String replace() 22) toLowercase() & toUpperCase() 23) Convert a Java String to Integer 24) HashMaps in Java 25) Command-line 26) This Keyword 27) Garbage Collection 28) Static Variables 29) Stack Heap 30) Inheritance 31) Polymorphism 32) Abstract Method & Class 33) Java Interface 34) Interface vs Abstract Class 35) Java Constructors 36) Java Packages 37) Exception Handling 38) User-defined 39) Throws 40) Trick with For Loop 41) Switch in Java 42) Maths with Java 43) Generate Random Number 44) Date in Java 45) Multithreading in Java 46) Java GUI – Swing 47) Split a String 48) Buffered Reader 49) Java Reflection API Tutorials 50) Check Prime Number 51) Convert JSON to XML using Gson and JAXB 52) Prime Number From 1 to 100 53) Convert Char to String 54) Fibonacci Series 55) Check Armstrong Number 56) Reverse String using Recursion 57) Check Palindrome Number 58) Bubble Sort Program 59) Insertion Sort Algorithm 60) Selection Sorting 61) Java Tools for Developers 62) Groovy Script Tutorial 63) Java Spring Tutorial 64) Apache ANT Tutorial 65) JasperReports Tutorial 66) C++ Vs JAVA 67) JDK Vs JRE Vs JVM 68) Java Vs C# 69) Java Vs Python 70) Java Vs Scala 71) Java Interview Q & A 72) Java Design Patterns Interview Q & A 73) JMS Interview Q & A 74) Groovy Interview Q & A 75) JAVA Programming PDF Java Tutorials Top Tutorials About About Us Advertise with Us Write For Us Contact Us Career Suggestion SAP Career Suggestion Tool Software Testing as a Career Selenium Testing Hacking Interesting eBook Blog Quiz SAP eBook SAP Java Python Execute online Execute Java Online Execute Javascript Execute HTML Execute Python Jmeter Informatica JIRA © Copyright - Guru99 2020         Privacy Policy  |  Affiliate Disclaimer  |  ToS
