https://www.guru99.com//java-packages.html
How to Create PACKAGE in Java: Learn with Example Program Home Testing Back Agile Testing BugZilla Cucumber Database Testing ETL Testing Jmeter JIRA Back JUnit LoadRunner Manual Testing Mobile Testing Mantis Postman QTP Back Quality Center (ALM) RPA SAP Testing Selenium SoapUI Test Management TestLink SAP Back ABAP APO Beginner Basis BODS BI BPC CO Back CRM Crystal Reports FICO HANA HR MM QM Payroll Back PI/PO PP SD SAPUI5 Security Solution Manager Successfactors SAP Tutorials Web Back Apache Android AngularJS ASP.Net C C# C++ CodeIgniter DBMS Back Java JavaScript JSP Kotlin Linux MariaDB MS Access MYSQL Node.js Back Perl PHP PL/SQL PostgreSQL Python ReactJS Ruby & Rails Scala SQL Back SQL Server SQLite UML VB.Net VBScript Web Services WPF Must Learn! Back Accounting Algorithms Blockchain Business Analyst Build Website CCNA Cloud Computing COBOL Compiler Design Embedded Systems Back Ethical Hacking Excel Tutorials Go Programming IoT ITIL Jenkins MIS Networking Operating System Prep Back PMP Photoshop Project Management Reviews Salesforce SEO Software Engineering VBA Big Data Back AWS BigData Cassandra Cognos Data Warehousing DevOps HBase Back Hive Informatica MicroStrategy MongoDB NiFi OBIEE Pentaho Back Power BI Qlikview Tableau Talend ZooKeeper Live Projects Back Live Agile Testing Live HP ALM Live Java Project Live Mobile Testing Live Payment Gateway Live PHP Project Live Projects Hub Live Python Project Back Live Selenium Project Live Selenium 2 Live Security Testing Live Testing Project Live Testing 2 Live Telecom Live UFT/QTP Testing AI Back Artificial Intelligence Data Science Keras NLTK Back NumPy PyTorch R Programming TensorFlow Blog How to Create PACKAGE in Java: Learn with Example Program Details Last Updated: 25 March 2020 What is Package in Java? A Package is a collection of related classes. It helps organize your classes into a folder structure and make it easy to locate and use them. More importantly, it helps improve re-usability. Each package in Java has its unique name and organizes its classes and interfaces into a separate namespace, or name group. Although interfaces and classes with the same name cannot appear in the same package, they can appear in different packages. This is possible by assigning a separate namespace to each package. Syntax:- package nameOfPackage; The following video takes you through the steps of creating a package. Click here if the video is not accessible Let's study package with an example. We define a class and object and later compile this it in our package p1. After compilation, we execute the code as a java package. Step 1) Consider the following code, Here, To put a class into a package, at the first line of code define package p1 Create a class c1 Defining a method m1 which prints a line. Defining the main method Creating an object of class c1 Calling method m1 Step 2) In next step, save this file as demo.java Step 3) In this step, we compile the file. The compilation is completed. A class file c1 is created. However, no package is created? Next step has the solution Step 4) Now we have to create a package, use the command javac –d . demo.java This command forces the compiler to create a package. The "." operator represents the current working directory. Step 5) When you execute the code, it creates a package p1. When you open the java package p1 inside you will see the c1.class file. Step 6) Compile the same file using the following code javac –d .. demo.java Here ".." indicates the parent directory. In our case file will be saved in parent directory which is C Drive File saved in parent directory when above code is executed. Step 7) Now let's say you want to create a sub package p2 within our existing java package p1. Then we will modify our code as package p1.p2 Step 8) Compile the file As seen in below screenshot, it creates a sub-package p2 having class c1 inside the package. Step 9) To execute the code mention the fully qualified name of the class i.e. the package name followed by the sub-package name followed by the class name - java p1.p2.c1 This is how the package is executed and gives the output as "m1 of c1" from the code file. Importing packages To create an object of a class (bundled in a package), in your code, you have to use its fully qualified name. Example: java.awt.event.actionListner object = new java.awt.event.actionListner();
 But, it could become tedious to type the long dot-separated package path name for every class you want to use. Instead, it is recommended you use the import statement. Syntax import packageName;			 Once imported, you can use the class without mentioning its fully qualified name. import java.awt.event.*; // * signifies all classes in this package are imported
import javax.swing.JFrame // here only the JFrame class is imported
//Usage
JFrame f = new JFrame; // without fully qualified name.

 Example: To import package Step 1) Copy the code into an editor. package p3;
import p1.*; //imports classes only in package p1 and NOT  in the sub-package p2
class c3{
  public   void m3(){
     System.out.println("Method m3 of Class c3");
  }
  public static void main(String args[]){
    c1 obj1 = new c1();
    obj1.m1();
  }
}

 Step 2) Save the file as Demo2.java. Compile the file using the command javac –d . Demo2.java Step 3)Execute the code using the command java p3.c3 Packages - points to note: To avoid naming conflicts packages are given names of the domain name of the company in reverse Ex: com.guru99. com.microsoft, com.infosys etc. When a package name is not specified, a class is in the default package (the current working directory) and the package itself is given no name. Hence you were able to execute assignments earlier. While creating a package, care should be taken that the statement for creating package must be written before any other import statements // not allowed
import package p1.*;
package p3;

//correct syntax
package p3;
import package p1.*;
 the java.lang package is imported by default for any class that you create in Java. The Java API is very extensive, contains classes which can perform almost all your programming tasks right from Data Structure Manipulation to Networking. More often than not, you will be using API files in your code. You can see the API documentation here.   Prev Report a Bug Next YOU MIGHT LIKE: Java Tutorials Insertion Sort Algorithm in Java Program with Example Insertion sort is a simple sorting algorithm suited for small data sets. During each iteration,... Read more Java Tutorials Armstrong Number Program in JAVA What is Armstrong Number ? In an Armstrong Number, the sum of power of individual digits is equal... Read more Java Tutorials Bubble Sort Program in Java: Sorting Algorithm EXAMPLE What is Bubble Sort? Bubble sort is a simple algorithm which compares the first element of the... Read more Java Tutorials Java String toLowercase() and toUpperCase() Methods 1. tolowercase() method This Java string method converts every character of the particular string... Read more JavaScript Top 85 JavaScript Interview Questions & Answers 1. What is JavaScript? JavaScript is a client-side as well as server side scripting language that... Read more Java Tutorials Top 22 Java Design Patterns Interview Questions & Answers 1) Explain what is Java Design Pattern? A design pattern is a language independent strategy for... Read more 1) Java Platform 2) Java Virtual Machine 3) How to install java 4) Download & Install Java in Linux 5) First Java Program 6) Concept of OOPs 7) Data Abstraction 8) Encapsulation 9) Java Variables 10) Class & Objects 11) Java Arrays 12) Array of Objects 13) ArrayList in Java 14) Java Strings 15) String Length() Method 16) String indexOf() Method 17) String charAt() Method 18) String compareTo() Method 19) String contains() Method 20) String endsWith() Method 21) Java String replace() 22) toLowercase() & toUpperCase() 23) Convert a Java String to Integer 24) HashMaps in Java 25) Command-line 26) This Keyword 27) Garbage Collection 28) Static Variables 29) Stack Heap 30) Inheritance 31) Polymorphism 32) Abstract Method & Class 33) Java Interface 34) Interface vs Abstract Class 35) Java Constructors 36) Java Packages 37) Exception Handling 38) User-defined 39) Throws 40) Trick with For Loop 41) Switch in Java 42) Maths with Java 43) Generate Random Number 44) Date in Java 45) Multithreading in Java 46) Java GUI – Swing 47) Split a String 48) Buffered Reader 49) Java Reflection API Tutorials 50) Check Prime Number 51) Convert JSON to XML using Gson and JAXB 52) Prime Number From 1 to 100 53) Convert Char to String 54) Fibonacci Series 55) Check Armstrong Number 56) Reverse String using Recursion 57) Check Palindrome Number 58) Bubble Sort Program 59) Insertion Sort Algorithm 60) Selection Sorting 61) Java Tools for Developers 62) Groovy Script Tutorial 63) Java Spring Tutorial 64) Apache ANT Tutorial 65) JasperReports Tutorial 66) C++ Vs JAVA 67) JDK Vs JRE Vs JVM 68) Java Vs C# 69) Java Vs Python 70) Java Vs Scala 71) Java Interview Q & A 72) Java Design Patterns Interview Q & A 73) JMS Interview Q & A 74) Groovy Interview Q & A 75) JAVA Programming PDF Java Tutorials Top Tutorials About About Us Advertise with Us Write For Us Contact Us Career Suggestion SAP Career Suggestion Tool Software Testing as a Career Selenium Testing Hacking Interesting eBook Blog Quiz SAP eBook SAP Java Python Execute online Execute Java Online Execute Javascript Execute HTML Execute Python Jmeter Informatica JIRA © Copyright - Guru99 2020         Privacy Policy  |  Affiliate Disclaimer  |  ToS
