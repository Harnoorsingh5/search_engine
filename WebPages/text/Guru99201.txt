https://www.guru99.com//java-stack-heap.html
Java Stack and Heap: Java Memory Allocation Tutorial Home Testing Back Agile Testing BugZilla Cucumber Database Testing ETL Testing Jmeter JIRA Back JUnit LoadRunner Manual Testing Mobile Testing Mantis Postman QTP Back Quality Center (ALM) RPA SAP Testing Selenium SoapUI Test Management TestLink SAP Back ABAP APO Beginner Basis BODS BI BPC CO Back CRM Crystal Reports FICO HANA HR MM QM Payroll Back PI/PO PP SD SAPUI5 Security Solution Manager Successfactors SAP Tutorials Web Back Apache Android AngularJS ASP.Net C C# C++ CodeIgniter DBMS Back Java JavaScript JSP Kotlin Linux MariaDB MS Access MYSQL Node.js Back Perl PHP PL/SQL PostgreSQL Python ReactJS Ruby & Rails Scala SQL Back SQL Server SQLite UML VB.Net VBScript Web Services WPF Must Learn! Back Accounting Algorithms Blockchain Business Analyst Build Website CCNA Cloud Computing COBOL Compiler Design Embedded Systems Back Ethical Hacking Excel Tutorials Go Programming IoT ITIL Jenkins MIS Networking Operating System Prep Back PMP Photoshop Project Management Reviews Salesforce SEO Software Engineering VBA Big Data Back AWS BigData Cassandra Cognos Data Warehousing DevOps HBase Back Hive Informatica MicroStrategy MongoDB NiFi OBIEE Pentaho Back Power BI Qlikview Tableau Talend ZooKeeper Live Projects Back Live Agile Testing Live HP ALM Live Java Project Live Mobile Testing Live Payment Gateway Live PHP Project Live Projects Hub Live Python Project Back Live Selenium Project Live Selenium 2 Live Security Testing Live Testing Project Live Testing 2 Live Telecom Live UFT/QTP Testing AI Back Artificial Intelligence Data Science Keras NLTK Back NumPy PyTorch R Programming TensorFlow Blog Java Stack and Heap: Java Memory Allocation Tutorial Details Last Updated: 25 March 2020 What is Stack Memory? Stack in java is a section of memory which contains methods, local variables, and reference variables. Stack memory is always referenced in Last-In-First-Out order. Local variables are created in the stack. What is Heap Memory? Heap is a section of memory which contains Objects and may also contain reference variables. Instance variables are created in the heap Memory Allocation in Java The JVM divided the memory into following sections. Heap Stack Code Static This division of memory is required for its effective management. The code section contains your bytecode. The Stack section of memory contains methods, local variables, and reference variables. The Heap section contains Objects (may also contain reference variables). The Static section contains Static data/methods. Difference between Local and Instance Variable Instance variable is declared inside a class but not inside a method class Student{ 
int num; // num is  instance variable 
public void showData{} Local variable are declared inside a method including method arguments. public void sum(int a){

int x = int a +  3;

// a , x are local variables;

} Difference between Stack and Heap Click here if the video is not accessible Let's take an example to understand this better. Consider that your main method calling method m1 
public void m1{
int x=20
} In the stack java, a frame will be created from method m1. The variable X in m1 will also be created in the frame for m1 in the stack. (See image below). Method m1 is calling method m2. In the stack java, a new frame is created for m2 on top of the frame m1. Variable b and c will also be created in a frame m2 in a stack. 
public void m2(int b){
boolean c;
} Same method m2 is calling method m3. Again a frame m3 is created on the top of the stack (see image below). Now let say our method m3 is creating an object for class "Account," which has two instances variable int p and int q. 
Account {
             Int p;
             Int q;
       } Here is the code for method m3 
public void m3(){
	Account ref = new Account();
	// more code
} The statement new Account() will create an object of account in heap. The reference variable "ref" will be created in a stack java. The assignment "=" operator will make a reference variable to point to the object in the Heap. Once the method has completed its execution. The flow of control will go back to the calling method. Which in this case is method m2. The stack from method m3 will be flushed out. Since the reference variable will no longer be pointing to the object in the heap, it would be eligible for garbage collection. Once method m2 has completed its execution. It will be popped out of the stack, and all its variable will be flushed and no longer be available for use. Likewise for method m1. Eventually, the flow of control will return to the start point of the program. Which usually, is the "main" method. What if Object has a reference as its instance variable? 
public static void main(String args[]) {
  A parent = new A(); //more code } class A{ B child = new B(); int e; //more code } class B{ int c; int d;  //more code }
 In this case , the reference variable "child" will be created in heap ,which in turn will be pointing to its object, something like the diagram shown below. Summary: When a method is called, a frame is created on the top of the stack. Once a method has completed execution, the flow of control returns to the calling method and its corresponding stack frame is flushed. Local variables are created in the stack Instance variables are created in the heap & are part of the object they belong to. Reference variables are created in the stack.   Prev Report a Bug Next YOU MIGHT LIKE: Java Tutorials Palindrome Program in Java: Check number is Palindrome or Not What is Palindrome Number? A Palindrome Number is a number that even when reversed is same as... Read more Java Tutorials Prime Number From 1 to 100 Program in Java What is a Prime Number? A prime number is a number that is only divisible by 1 or itself. For... Read more Java Tutorials Fibonacci Series Program in Java using Loops & Recursion What is Fibonacci Series? In Fibonacci series, next number is the sum of previous two numbers. The... Read more Java Tutorials Apache ANT Tutorial: Installation, Project Structure, Build Example What is a Build Tool? A build tool is a programming tool which is used to build a new version of a... Read more Java Tutorials Top 25 JMS (Java Message Service) Interview Questions & Answers 1) What is JMS? JMS means Java Messaging Service. It is the new standard for inter client... Read more Java Tutorials String charAt() Method in Java with Example Why use string "charAt" Method? The charat method returns the character at the definite index. In this... Read more 1) Java Platform 2) Java Virtual Machine 3) How to install java 4) Download & Install Java in Linux 5) First Java Program 6) Concept of OOPs 7) Data Abstraction 8) Encapsulation 9) Java Variables 10) Class & Objects 11) Java Arrays 12) Array of Objects 13) ArrayList in Java 14) Java Strings 15) String Length() Method 16) String indexOf() Method 17) String charAt() Method 18) String compareTo() Method 19) String contains() Method 20) String endsWith() Method 21) Java String replace() 22) toLowercase() & toUpperCase() 23) Convert a Java String to Integer 24) HashMaps in Java 25) Command-line 26) This Keyword 27) Garbage Collection 28) Static Variables 29) Stack Heap 30) Inheritance 31) Polymorphism 32) Abstract Method & Class 33) Java Interface 34) Interface vs Abstract Class 35) Java Constructors 36) Java Packages 37) Exception Handling 38) User-defined 39) Throws 40) Trick with For Loop 41) Switch in Java 42) Maths with Java 43) Generate Random Number 44) Date in Java 45) Multithreading in Java 46) Java GUI – Swing 47) Split a String 48) Buffered Reader 49) Java Reflection API Tutorials 50) Check Prime Number 51) Convert JSON to XML using Gson and JAXB 52) Prime Number From 1 to 100 53) Convert Char to String 54) Fibonacci Series 55) Check Armstrong Number 56) Reverse String using Recursion 57) Check Palindrome Number 58) Bubble Sort Program 59) Insertion Sort Algorithm 60) Selection Sorting 61) Java Tools for Developers 62) Groovy Script Tutorial 63) Java Spring Tutorial 64) Apache ANT Tutorial 65) JasperReports Tutorial 66) C++ Vs JAVA 67) JDK Vs JRE Vs JVM 68) Java Vs C# 69) Java Vs Python 70) Java Vs Scala 71) Java Interview Q & A 72) Java Design Patterns Interview Q & A 73) JMS Interview Q & A 74) Groovy Interview Q & A 75) JAVA Programming PDF Java Tutorials Top Tutorials About About Us Advertise with Us Write For Us Contact Us Career Suggestion SAP Career Suggestion Tool Software Testing as a Career Selenium Testing Hacking Interesting eBook Blog Quiz SAP eBook SAP Java Python Execute online Execute Java Online Execute Javascript Execute HTML Execute Python Jmeter Informatica JIRA © Copyright - Guru99 2020         Privacy Policy  |  Affiliate Disclaimer  |  ToS
