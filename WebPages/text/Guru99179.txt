https://www.guru99.com//java-data-abstraction.html
What is Abstraction in OOPs? Learn with Java Example Home Testing Back Agile Testing BugZilla Cucumber Database Testing ETL Testing Jmeter JIRA Back JUnit LoadRunner Manual Testing Mobile Testing Mantis Postman QTP Back Quality Center (ALM) RPA SAP Testing Selenium SoapUI Test Management TestLink SAP Back ABAP APO Beginner Basis BODS BI BPC CO Back CRM Crystal Reports FICO HANA HR MM QM Payroll Back PI/PO PP SD SAPUI5 Security Solution Manager Successfactors SAP Tutorials Web Back Apache Android AngularJS ASP.Net C C# C++ CodeIgniter DBMS Back Java JavaScript JSP Kotlin Linux MariaDB MS Access MYSQL Node.js Back Perl PHP PL/SQL PostgreSQL Python ReactJS Ruby & Rails Scala SQL Back SQL Server SQLite UML VB.Net VBScript Web Services WPF Must Learn! Back Accounting Algorithms Blockchain Business Analyst Build Website CCNA Cloud Computing COBOL Compiler Design Embedded Systems Back Ethical Hacking Excel Tutorials Go Programming IoT ITIL Jenkins MIS Networking Operating System Prep Back PMP Photoshop Project Management Reviews Salesforce SEO Software Engineering VBA Big Data Back AWS BigData Cassandra Cognos Data Warehousing DevOps HBase Back Hive Informatica MicroStrategy MongoDB NiFi OBIEE Pentaho Back Power BI Qlikview Tableau Talend ZooKeeper Live Projects Back Live Agile Testing Live HP ALM Live Java Project Live Mobile Testing Live Payment Gateway Live PHP Project Live Projects Hub Live Python Project Back Live Selenium Project Live Selenium 2 Live Security Testing Live Testing Project Live Testing 2 Live Telecom Live UFT/QTP Testing AI Back Artificial Intelligence Data Science Keras NLTK Back NumPy PyTorch R Programming TensorFlow Blog What is Abstraction in OOPs? Learn with Java Example Details Last Updated: 31 March 2020 What is Abstraction in OOP? Abstraction is selecting data from a larger pool to show only the relevant details of the object to the user. Abstraction “shows” only the essential attributes and “hides” unnecessary information. It helps to reduce programming complexity and effort. It is one of the most important concepts of OOPs. Click here if the video is not accessible Let’s Study Abstraction concept with an Example Suppose you want to create a banking application and you are asked to collect all the information about your customer. There are chances that you will come up with following information about the customer But, not all of the above information is required to create a banking application. So, you need to select only the useful information for your banking application from that pool. Data like name, address, tax information, etc. make sense for a banking application Since we have fetched/removed/selected the customer information from a larger pool, the process is referred as Abstraction. However, the same information once extracted can be used for a wide range of applications. For instance, you can use the same data for hospital application, job portal application, a Government database, etc. with little or no modification. Hence, it becomes your Master Data. This is an advantage of Abstraction. What is Abstraction in Java? Abstraction in JAVA “shows” only the essential attributes and “hides” unnecessary details of the object from the user. In Java, abstraction is accomplished using Abstract classes, Abstract methods, and interfaces. Abstraction helps in reducing programming complexity and effort. Abstract Class A class which is declared “abstract” is called as an abstract class. It can have abstract methods as well as concrete methods. A normal class cannot have abstract methods. Abstract Method A method without a body is known as an Abstract Method. It must be declared in an abstract class. The abstract method will never be final because the abstract class must implement all the abstract methods. Rules of Abstract Method Abstract methods do not have an implementation; it only has method signature If a class is using an abstract method they must be declared abstract. The opposite cannot be true. This means that an abstract class does not necessarily have an abstract method. If a regular class extends an abstract class, then that class must implement all the abstract methods of the abstract parent Difference between Abstraction and Encapsulation Abstraction Encapsulation Abstraction solves the issues at the design level. Encapsulation solves it implementation level. Abstraction is about hiding unwanted details while showing most essential information. Encapsulation means binding the code and data into a single unit. Abstraction allows focussing on what the information object must contain Encapsulation means hiding the internal details or mechanics of how an object does something for security reasons. Difference between Abstract Class and Interface Abstract Class Interface An abstract class can have both abstract and non-abstract methods. The interface can have only abstract methods. It does not support multiple inheritances. It supports multiple inheritances. It can provide the implementation of the interface. It can not provide the implementation of the abstract class. An abstract class can have protected and abstract public methods. An interface can have only have public abstract methods. An abstract class can have final, static, or static final variable with any access specifier. The interface can only have a public static final variable. Advantages of Abstraction The main benefit of using an abstract class is that it allows you to group several related classes as siblings. Abstraction helps to reduce the complexity of the design and implementation process of software. When to use Abstract Methods & Abstract Class? Abstract methods are mostly declared where two or more subclasses are also doing the same thing in different ways through different implementations. It also extends the same Abstract class and offers different implementations of the abstract methods. Abstract classes help to describe generic types of behaviors and object-oriented programming class hierarchy. It also describes subclasses to offer implementation details of the abstract class. Summary: Abstraction is the process of selecting important data sets for an Object in your software and leaving out the insignificant ones. Once you have modeled your object using Abstraction, the same set of data could be used in different applications. Java, abstraction is accomplished using Abstract classes and interfaces. We will study in detail about Abstract classes and interfaces in further tutorials.   Prev Report a Bug Next YOU MIGHT LIKE: Java Tutorials Java Spring Tutorial: Features, History, MVC Framework Architecture What is the Spring framework? Spring is a easy to use open-source Java MVC framework provides... Read more Java Tutorials How to Reverse a String in Java using Recursion In this example program, we will reverse a string entered by a user. We will create a function to... Read more JavaScript JavaScript Unit Testing Frameworks What is JavaScript? JavaScript is a programming language which is defined as high level, dynamic and... Read more JavaScript Typescript vs JavaScript: What's the Difference? What is JavaScript? JavaScript is a scripting language which helps you create interactive web... Read more Java Tutorials JAVA Programming Tutorial for Beginners PDF Java is the most popular programming language & is the language of choice for Android programming. Key... Read more Java Tutorials 20 Best Java Tools for Developers in 2020 There are many tools available for Java management. These software ease the entire process of... Read more 1) Java Platform 2) Java Virtual Machine 3) How to install java 4) Download & Install Java in Linux 5) First Java Program 6) Concept of OOPs 7) Data Abstraction 8) Encapsulation 9) Java Variables 10) Class & Objects 11) Java Arrays 12) Array of Objects 13) ArrayList in Java 14) Java Strings 15) String Length() Method 16) String indexOf() Method 17) String charAt() Method 18) String compareTo() Method 19) String contains() Method 20) String endsWith() Method 21) Java String replace() 22) toLowercase() & toUpperCase() 23) Convert a Java String to Integer 24) HashMaps in Java 25) Command-line 26) This Keyword 27) Garbage Collection 28) Static Variables 29) Stack Heap 30) Inheritance 31) Polymorphism 32) Abstract Method & Class 33) Java Interface 34) Interface vs Abstract Class 35) Java Constructors 36) Java Packages 37) Exception Handling 38) User-defined 39) Throws 40) Trick with For Loop 41) Switch in Java 42) Maths with Java 43) Generate Random Number 44) Date in Java 45) Multithreading in Java 46) Java GUI – Swing 47) Split a String 48) Buffered Reader 49) Java Reflection API Tutorials 50) Check Prime Number 51) Convert JSON to XML using Gson and JAXB 52) Prime Number From 1 to 100 53) Convert Char to String 54) Fibonacci Series 55) Check Armstrong Number 56) Reverse String using Recursion 57) Check Palindrome Number 58) Bubble Sort Program 59) Insertion Sort Algorithm 60) Selection Sorting 61) Java Tools for Developers 62) Groovy Script Tutorial 63) Java Spring Tutorial 64) Apache ANT Tutorial 65) JasperReports Tutorial 66) C++ Vs JAVA 67) JDK Vs JRE Vs JVM 68) Java Vs C# 69) Java Vs Python 70) Java Vs Scala 71) Java Interview Q & A 72) Java Design Patterns Interview Q & A 73) JMS Interview Q & A 74) Groovy Interview Q & A 75) JAVA Programming PDF Java Tutorials Top Tutorials About About Us Advertise with Us Write For Us Contact Us Career Suggestion SAP Career Suggestion Tool Software Testing as a Career Selenium Testing Hacking Interesting eBook Blog Quiz SAP eBook SAP Java Python Execute online Execute Java Online Execute Javascript Execute HTML Execute Python Jmeter Informatica JIRA © Copyright - Guru99 2020         Privacy Policy  |  Affiliate Disclaimer  |  ToS
